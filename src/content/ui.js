import { createElement } from "../utils";
import * as Styles from "./styles";

export const renderCheckPriceButton = (container, {onClick}) => {
  return createElement(container, "button", {
    type: "button",
    children: 'Check Price',
    style: Styles.PRICE_CHECK_BUTTON,
    onClick,
  });
}

const createPartLink = part => {
  const colorParam = part.colorName.length > 0 ? `C=${part.colorID}` : "";
  return `https://www.bricklink.com/v2/catalog/catalogitem.page?${part.itemType}=${part.itemNo}#T=P&${colorParam}`;
}

export const renderPartLink = (container, {part}) => {
  const category = (part.categoryName || "").length > 0 ? `(${part.categoryName})` : "";
  return createElement(container, "a", {
    children: `${part.itemNo} ${category}`,
    target: "_blank",
    rel: "noopener noreferrer",
    href: createPartLink(part),
  });
}

export const renderPriceRow = (container, {label, price}) => {
  return createElement(container, "span", {
    children: `${label}: ${price || "-"}`,
    style: Styles.PRICE_SPAN,
  });
}

export const renderErrorMessage = (container, {text}) => {
  return createElement(container, "span", {
    children: text,
    style: Styles.ERROR_MESSAGE,
  });
}

export const renderLoader = (container) => {
  const divWrapper = createElement(container, "div", {
    style: Styles.LOADER,
  });

  // <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: rgb(255, 255, 255) none repeat scroll 0% 0%; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
  const LOADER_SVG = `
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
      <circle cx="50" cy="50" fill="none" stroke="#eee" stroke-width="10" r="35" stroke-dasharray="164.93361431346415 56.97787143782138">
        <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" values="0 50 50;360 50 50" keyTimes="0;1"></animateTransform>
      </circle>
      <!-- [ldio] generated by https://loading.io/ -->
    </svg>
  `;
  const blob = new Blob([LOADER_SVG], {type: 'image/svg+xml'});
  const url = URL.createObjectURL(blob);
  const imageEl = createElement(divWrapper, "img", {
    onload: () => URL.revokeObjectURL(url), // TODO {once: true}
    src: url,
  });

  return divWrapper;
};

export const renderPriceDetails = (container, {item, prices}) => {
  renderPriceRow(container, {
    label: "Cheapest USED",
    price: prices.partsUsed[0]?.price,
  });
  renderPriceRow(container, {
    label: "Cheapest NEW",
    price: prices.partsNew[0]?.price,
  });
}
